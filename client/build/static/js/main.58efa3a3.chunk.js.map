{"version":3,"sources":["utils/auth.js","components/Header/index.js","components/Footer/index.js","utils/mutations.js","pages/Login.js","pages/NoMatch.js","utils/queries.js","components/ReactionList/index.js","pages/SingleComment.js","components/CommentList/index.js","components/FriendList/index.js","pages/Profile.js","pages/Signup.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Header","className","to","Auth","loggedIn","href","onClick","event","preventDefault","logout","Footer","LOGIN_USER","gql","ADD_USER","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleChange","target","name","value","handleFormSubmit","variables","data","console","onSubmit","placeholder","type","id","onChange","NoMatch","QUERY_COMMENTS","QUERY_COMMENT","QUERY_USER","ReactionList","reactions","map","reaction","reactionBody","username","style","fontWeight","createdAt","_id","SingleComment","commentId","useParams","useQuery","loading","comment","commentText","reactionCount","CommentList","comments","title","length","FriendList","friendCount","friends","friend","Profile","userParam","user","Signup","addUser","Home","log","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58efa3a3.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { Link } from 'react-router-dom';\nimport React from 'react';\n\nimport Auth from '../../utils/auth';\n\nconst Header = () => {\n  const logout = event => {\n    event.preventDefault();\n    Auth.logout();\n  };\n\n  return (\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link to=\"/\">\n          <h1>NIM Portal</h1>\n        </Link>\n\n        <nav className=\"text-center\">\n          {Auth.loggedIn() ? (\n            <>\n              <Link to=\"/profile\">Me</Link>\n              <a href=\"/\" onClick={logout}>\n                Logout\n              </a>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\">Login</Link>\n              <Link to=\"/signup\">Signup</Link>\n            </>\n          )}\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container\">&copy;2022 by NIM Portal</div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Login</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n\n            {error && <div>Login failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\nconst NoMatch = () => {\n  return (\n    <div>\n      Oops, we couldn't find that page.\n    </div>\n  );\n};\n\nexport default NoMatch;","import { gql } from '@apollo/client';\n\nexport const QUERY_COMMENTS = gql`\n  query comments($username: String) {\n    comments(username: $username) {\n      _id\n      commentText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_COMMENT = gql`\n  query comment($id: ID!) {\n    comment(_id: $id) {\n      _id\n      commentText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      comments {\n        _id\n        commentText\n        createdAt\n        reactionCount\n      }\n    }\n  }\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ReactionList = ({ reactions }) => {\n  return (\n    <div className=\"card mb-3\">\n    <div className=\"card-header\">\n        <span className=\"text-light\">Reactions</span>\n    </div>\n    <div className=\"card-body\">\n        {reactions &&\n        reactions.map(reaction => (\n            <p className=\"pill mb-3\" key={reaction._id}>\n            {reaction.reactionBody} {'// '}\n            <Link to={`/profile/${reaction.username}`} style={{ fontWeight: 700 }}>\n                {reaction.username} on {reaction.createdAt}\n            </Link>\n            </p>\n        ))}\n    </div>\n    </div>\n  );\n};\n\nexport default ReactionList;","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_COMMENT } from '../utils/queries';\nimport ReactionList from '../components/ReactionList';\n\nconst SingleComment = props => {\n  const { id: commentId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_COMMENT, {\n    variables: { id: commentId }\n  });\n\n  const comment = data?.comment || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  \n  return (\n    <div>\n      <div className=\"card mb-3\">\n        <p className=\"card-header\">\n          <span style={{ fontWeight: 700 }} className=\"text-light\">\n            {comment.username}\n          </span>{' '}\n          comment on {comment.createdAt}\n        </p>\n        <div className=\"card-body\">\n          <p>{comment.commentText}</p>\n        </div>\n      </div>\n      {comment.reactionCount > 0 && <ReactionList reactions={comment.reactions} />}\n    </div>\n  );\n};\n\nexport default SingleComment;\n","import { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentList = ({ comments, title }) => {\n  if (!comments.length) {\n    return <h3>No Comments Yet</h3>;\n  }\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      {comments &&\n        comments.map((comment) => (\n          <div key={comment._id} className=\"card mb-3\">\n            <p className=\"card-header\">\n              <Link\n                to={`/profile/${comment.username}`}\n                style={{ fontWeight:700 }}\n                className=\"text-light\"\n              >\n              {comment.username}\n              </Link> {' '}\n              comment on {comment.createdAt}\n            </p>\n            <div className=\"card-body\">\n              <Link to={`/comment/${comment._id}`}>\n              <p>{comment.commentText}</p>\n              <p className=\"mb-0\">\n                Reactions: {comment.reactionCount} || Click to{' '}\n                {comment.reactionCount ? 'see' : 'start'} the discussion!\n              </p>\n              </Link>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default CommentList;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst FriendList = ({ friendCount, username, friends }) => {\n  if (!friends || !friends.length) {\n    return <p className=\"bg-dark text-light p-3\">{username}, meet others involved with this nonprofit!</p>;\n  }\n\n  return (\n    <div>\n      <h5>\n        {username}'s {friendCount} {friendCount === 1 ? 'friend' : 'friends'}\n      </h5>\n      {friends.map(friend => (\n        <button className=\"btn w-100 display-block mb-2\" key={friend._id}>\n          <Link to={`/profile/${friend.username}`}>{friend.username}</Link>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FriendList;","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport CommentList from '../components/CommentList';\nimport FriendList from '../components/FriendList';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nconst Profile = () => {\n  const { username: userParam } = useParams();\n\n  const { loading, data } = useQuery(QUERY_USER, {\n    variables: { username: userParam }\n  });\n\n  const user = data?.user || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"flex-row mb-3\">\n        <h2 className=\"bg-dark text-secondary p-3 display-inline-block\">\n          Viewing {user.username}'s profile.\n        </h2>\n      </div>\n\n      <div className=\"flex-row justify-space-between mb-3\">\n        <div className=\"col-12 mb-3 col-lg-8\">\n          <CommentList comments={user.comments} title={`${user.username}'s comments...`} />\n        </div>\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList\n            username={user.username}\n            friendCount={user.friendCount}\n            friends={user.friends}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Sign Up</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your username\"\n                name=\"username\"\n                type=\"username\"\n                id=\"username\"\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n\n            {error && <div>Signup failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_COMMENTS } from '../utils/queries';\nimport CommentList from '../components/CommentList';\n\n\nconst Home = () => {\n  // use useQuery hook to make query request\n  const { loading, data } = useQuery(QUERY_COMMENTS);\n\n  const comments = data?.comments || [];\n  console.log(comments);\n\n  return (\n    <main>\n  <div className=\"flex-row justify-space-between\">\n    <div className=\"col-12 mb-3\">\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n        <CommentList comments={comments} title=\"Some Feed for Comment(s)...\" />\n      )}\n    </div>\n  </div>\n</main>\n  );\n};\nexport default Home;","import { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport React from 'react';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './pages/Login';\nimport NoMatch from './pages/NoMatch';\nimport SingleComment from './pages/SingleComment';\nimport Profile from './pages/Profile';\nimport Signup from './pages/Signup';\n\nimport Home from './pages/Home';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={<Home />}\n              />\n              <Route\n                path=\"/login\"\n                element={<Login />}\n              />\n              <Route\n                path=\"/signup\"\n                element={<Signup />}\n              />\n              <Route path=\"/profile\">\n                <Route path =\":username\" element={<Profile />} />\n                <Route path=\"\" element={<Profile />} />\n              </Route>\n              <Route\n                path=\"/comment:id\"\n                element={<SingleComment />}\n              />\n              <Route\n                path='*'\n                element={<NoMatch />}\n              />\n            </Routes>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}